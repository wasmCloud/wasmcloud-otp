name: WasmCloud Release

on:
  push:
    tags: ["v*"] # Push events to matching v*, i.e. v1.0, v20.15.10
  workflow_dispatch: # Allow manual creation of artifacts without a release
  pull_request:
    branches: [main]

jobs:
  compile-native-nif:
    # Run on tag push or on manual dispatch. Release will not be created for manual dispatch
    # if: ${{ startswith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    name: Compile wasmcloud_host_core Native NIF
    env:
      working-directory: ./host_core/native/hostcore_wasmcloud_native
      artifact-name: hostcore_wasmcloud_native
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
          - x86_64-apple-darwin
          #TODO: determine if -gnu is fine or if we need -msvc
          - x86_64-pc-windows-gnu
          # - aarch64-apple-darwin
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: wasmcloud/common-actions/install-cross@main

      - name: Build native nif
        run: |
          chmod +x ~/.cargo/bin/cross
          cross build --release --target ${{ matrix.target }}
        working-directory: ${{ env.working-directory }}

      - name: check paths
        run: ls -R ${{ env.working-directory }}/target/${{ matrix.target }}/release

      - name: Upload nif to GH Actions
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          if-no-files-found: error
          path: |
            ${{ env.working-directory }}/target/${{ matrix.target }}/release/lib${{ env.artifact-name }}.so
            ${{ env.working-directory }}/target/${{ matrix.target }}/release/${{ env.artifact-name }}.dll
            ${{ env.working-directory }}/target/${{ matrix.target }}/release/lib${{ env.artifact-name }}.dylib

  build-distillery-executable:
    # Run on tag push or on manual dispatch. Release will not be created for manual dispatch
    # if: ${{ startswith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    needs: compile-native-nif
    name: Build application release tarballs
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, windows-2019, macos-11]
        working-directory: [wasmcloud_host, host_core]
        include:
          - os: ubuntu-20.04
            rust-target: x86_64-unknown-linux-gnu
            distillery-filename: wasmcloud-x86_64-linux
            working-directory: wasmcloud_host
          - os: windows-2019
            rust-target: x86_64-pc-windows-gnu
            distillery-filename: wasmcloud-x86_64-windows.tar.gz
            working-directory: wasmcloud_host
          - os: macos-11
            rust-target: x86_64-apple-darwin
            distillery-filename: wasmcloud-x86_64-macos
            working-directory: wasmcloud_host
          - os: ubuntu-20.04
            rust-target: x86_64-unknown-linux-gnu
            distillery-filename: wasmcloud-core-x86_64-linux
            working-directory: host_core
          - os: windows-2019
            rust-target: x86_64-pc-windows-gnu
            distillery-filename: wasmcloud-core-x86_64-windows.tar.gz
            working-directory: host_core
          - os: macos-11
            rust-target: x86_64-apple-darwin
            distillery-filename: wasmcloud-core-x86_64-macos
            working-directory: host_core
    runs-on: ${{ matrix.os }}
    env:
      working-directory: ${{ matrix.working-directory }}
      MIX_ENV: release_prod
      ERLANG_VERSION: 24
      ELIXIR_VERSION: 1.13.3
      SECRET_KEY_BASE: ${{ secrets.WASMCLOUD_HOST_SECRET_KEY_BASE }}

    steps:
      - uses: actions/checkout@v2
      - name: Set up Visual Studio C++ toolchain for Windows
        uses: ilammy/msvc-dev-cmd@v1
        if: ${{ startswith(matrix.os, 'windows') }}

      # Install erlang/OTP and elixir
      - name: Install erlang and elixir
        if: ${{ startswith(matrix.os, 'ubuntu') || startswith(matrix.os, 'windows') }}
        uses: erlef/setup-beam@v1
        with:
          otp-version: "=24"
          elixir-version: "1.13.4"
          install-hex: true
          install-rebar: true
      - name: Install erlang and elixir
        shell: bash
        if: ${{ startswith(matrix.os, 'macos') }}
        run: |
          git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.8.1
          echo ". $HOME/.asdf/asdf.sh" >> $HOME/.bash_profile
          . $HOME/.asdf/asdf.sh

          asdf plugin add erlang https://github.com/asdf-vm/asdf-erlang.git
          asdf install erlang 24.3.4
          asdf global erlang 24.3.4
          asdf plugin add elixir https://github.com/asdf-vm/asdf-elixir.git
          asdf install elixir 1.13.4
          asdf global elixir 1.13.4

      - name: Determine version
        shell: bash
        run: echo "wasmcloud_host_version=$(grep '@app_vsn "' ${{env.working-directory}}/mix.exs | cut -d '"' -f2)" > $GITHUB_ENV

      - name: Retrieve Mix Dependencies Cache
        if: ${{ !startswith(matrix.os, 'windows') }} # Windows gets angry about not owning files if you restore from cache
        uses: actions/cache@v2
        id: mix-cache #id to use in retrieve action
        with:
          path: |
            ${{ env.working-directory }}/deps
          key: ${{ runner.os }}-${{ env.ERLANG_VERSION }}-${{ env.ELIXIR_VERSION }}-mix-${{ hashFiles('${{ env.working-directory }}/mix.exs', '${{ env.working-directory }}/mix.lock') }}

      - name: Install Mix Dependencies
        working-directory: ${{env.working-directory}}
        run: |
          . $HOME/.asdf/asdf.sh || true # Temporary hack until distillery works with OTP 25.0
          mix local.rebar --force 
          mix local.hex --force
          mix deps.get

      # Download the NIF in the path that Rustler expects
      - uses: actions/download-artifact@v3
        with:
          path: ${{ env.working-directory }}/priv/built
          name: ${{ matrix.rust-target }}

      # Required step as Rustler always looks for the same .so file regardless of OS
      - name: Rename NIF to shared object
        if: ${{ !startswith(matrix.os, 'ubuntu') }} # Don't attempt to rename a shared object
        working-directory: ${{env.working-directory}}/priv/built
        run: |
          mv *hostcore_wasmcloud_native* libhostcore_wasmcloud_native.so

      - name: Compile Elixir
        working-directory: ${{env.working-directory}}
        run: |
          . $HOME/.asdf/asdf.sh || true # Temporary hack until distillery works with OTP 25.0
          mix compile

      - name: Compile Phoenix Assets
        if: ${{ env.working-directory == 'wasmcloud_host' }}
        working-directory: ${{env.working-directory}}
        shell: bash
        run: |
          . $HOME/.asdf/asdf.sh || true # Temporary hack until distillery works with OTP 25.0
          make esbuild

      - name: debug files
        working-directory: ${{env.working-directory}}
        run: |
          ls -R ./_build
          ls -R ./

      - name: Create Distillery Release
        if: ${{ !startswith(matrix.os, 'windows') }}
        working-directory: ${{env.working-directory}}
        run: |
          . $HOME/.asdf/asdf.sh || true # Temporary hack until distillery works with OTP 25.0
          mkdir -p _build/${{ env.MIX_ENV }}/rel/${{env.working-directory}}/releases
          touch _build/${{ env.MIX_ENV }}/rel/${{env.working-directory}}/releases/RELEASES
          mix distillery.release --executable --verbose
          mv _build/${{ env.MIX_ENV }}/rel/${{env.working-directory}}/bin/${{env.working-directory}}.run ${{ matrix.distillery-filename }}
      # --executable not supported on Windows
      - name: Create Distillery Release
        if: ${{ startswith(matrix.os, 'windows') }}
        working-directory: ${{env.working-directory}}
        run: |
          mix distillery.release --verbose
          mv _build/${{ env.MIX_ENV }}/rel/${{env.working-directory}}/releases/${{ env.wasmcloud_host_version }}/${{env.working-directory}}.tar.gz ${{ matrix.distillery-filename }}

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.distillery-filename }}
          path: ${{env.working-directory}}/${{ matrix.distillery-filename }}

  release-docker:
    # if: startswith(github.ref, 'refs/tags/') # Only run on tag push
    needs: compile-native-nif
    name: Release Linux Docker Image
    runs-on: ubuntu-latest
    env:
      MIX_ENV: release_prod
      working-directory: wasmcloud_host
      SECRET_KEY_BASE: ${{ secrets.WASMCLOUD_HOST_SECRET_KEY_BASE }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to AzureCR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.AZURECR_PUSH_URL }}
          username: ${{ secrets.AZURECR_PUSH_USER }}
          password: ${{ secrets.AZURECR_PUSH_PASSWORD }}

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_PUSH_USER }}
          password: ${{ secrets.DOCKERHUB_PUSH_PASSWORD }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        id: buildx-builder

      - name: Determine version
        run: echo "wasmcloud_host_version=$(grep '@app_vsn "' ${{env.working-directory}}/mix.exs | cut -d '"' -f2)" > $GITHUB_ENV

      # Install erlang/OTP and elixir
      - name: Install erlang and elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: "=24"
          elixir-version: "1.13.3"
          install-hex: true
          install-rebar: true

      - name: Install Mix Dependencies
        working-directory: ${{env.working-directory}}
        run: |
          mix local.rebar --force 
          mix local.hex --force
          mix deps.get

      - name: Compile Phoenix Assets
        working-directory: ${{env.working-directory}}
        shell: bash
        run: |
          make esbuild

      # Download the NIF in the path that Docker expects for x86
      - uses: actions/download-artifact@v3
        with:
          path: ./host_core/priv/built/x86_64
          name: x86_64-unknown-linux-gnu
      # Download the NIF in the path that Docker expects for aarch64
      - uses: actions/download-artifact@v3
        with:
          path: ./host_core/priv/built/aarch64
          name: aarch64-unknown-linux-gnu

      - name: debug files
        run: ls -R ./host_core/priv/built

      - name: Build and release docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          builder: ${{ steps.buildx-builder.outputs.name }}
          #TODO: make true
          push: false
          file: ${{env.working-directory}}/Dockerfile
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILDER_IMAGE=elixir:1.13.3-slim
            RELEASE_IMAGE=debian:bullseye-slim
            APP_NAME=wasmcloud_host
            APP_VSN=${{ env.wasmcloud_host_version }}
            SECRET_KEY_BASE=${{ secrets.WASMCLOUD_HOST_SECRET_KEY_BASE }}
          tags: |
            wasmcloud.azurecr.io/wasmcloud_host:${{ env.wasmcloud_host_version }}
            wasmcloud.azurecr.io/wasmcloud_host:latest
            wasmcloud/wasmcloud_host:${{ env.wasmcloud_host_version }}
            wasmcloud/wasmcloud_host:latest

  github-release:
    if: startswith(github.ref, 'refs/tags/') # Only run on tag push
    needs: [build-distillery-executable]
    runs-on: ubuntu-latest
    steps:
      - name: Download Release Tarballs
        uses: actions/download-artifact@v2
        with:
          path: release

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/**/*.tar.gz
          token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: false
          draft: false

  release-charts:
    if: ${{ startswith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.7.1

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.2.1
        with:
          charts_dir: wasmcloud_host
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
