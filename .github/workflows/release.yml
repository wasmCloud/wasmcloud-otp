name: WasmCloud Release

on:
  push:
    tags: ["v*"] # Push events to matching v*, i.e. v1.0, v20.15.10
  workflow_dispatch: # Allow manual creation of artifacts without a release
  pull_request:
    branches: [main]
env:
  otp-version: 25
  elixir-version: 1.14.3

jobs:
  create-mix-releases:
    # Run on tag push or on manual dispatch. Release will not be created for manual dispatch
    if: ${{ startswith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    name: Mix release
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, windows-2019, macos-11]
        working-directory: [wasmcloud_host, host_core]
        include:
          - os: ubuntu-20.04
            rust-target: x86_64-unknown-linux-gnu
            release-tarball: x86_64-linux.tar.gz
            working-directory: wasmcloud_host
          - os: windows-2019
            rust-target: x86_64-pc-windows-gnu
            release-tarball: x86_64-windows.tar.gz
            working-directory: wasmcloud_host
          - os: macos-11
            rust-target: x86_64-apple-darwin
            release-tarball: x86_64-macos.tar.gz
            working-directory: wasmcloud_host
          - os: ubuntu-20.04
            rust-target: x86_64-unknown-linux-gnu
            release-tarball: x86_64-linux-core.tar.gz
            working-directory: host_core
          - os: windows-2019
            rust-target: x86_64-pc-windows-gnu
            release-tarball: x86_64-windows-core.tar.gz
            working-directory: host_core
          - os: macos-11
            rust-target: x86_64-apple-darwin
            release-tarball: x86_64-macos-core.tar.gz
            working-directory: host_core
    runs-on: ${{ matrix.os }}
    env:
      working-directory: ${{ matrix.working-directory }}
      MIX_ENV: release_prod
      SECRET_KEY_BASE: ${{ secrets.WASMCLOUD_HOST_SECRET_KEY_BASE }}

    steps:
      - uses: actions/checkout@v3

      # Install Rust
      - uses: dtolnay/rust-toolchain@stable

      # Install erlang/OTP and elixir
      - name: Install erlang and elixir
        if: ${{ startswith(matrix.os, 'ubuntu') || startswith(matrix.os, 'windows') }}
        uses: erlef/setup-beam@v1
        with:
          otp-version: "=${{ env.otp-version }}"
          elixir-version: "${{ env.elixir-version }}"
          install-hex: true
          install-rebar: true
      - name: Install erlang and elixir
        if: ${{ startswith(matrix.os, 'macos') }}
        run: |
          brew install erlang
          brew install elixir

      - name: Retrieve Mix Dependencies Cache
        if: ${{ !startswith(matrix.os, 'windows') }} # Windows gets angry about not owning files if you restore from cache
        uses: actions/cache@v2
        id: mix-cache #id to use in retrieve action
        with:
          path: |
            ${{ env.working-directory }}/deps
          key: ${{ runner.os }}-${{ env.ERLANG_VERSION }}-${{ env.ELIXIR_VERSION }}-mix-${{ hashFiles('${{ env.working-directory }}/mix.exs', '${{ env.working-directory }}/mix.lock') }}

      - name: Install Mix Dependencies
        working-directory: ${{env.working-directory}}
        shell: bash
        run: |
          mix local.rebar --force
          mix local.hex --force
          mix deps.get

      - name: Compile Elixir
        working-directory: ${{env.working-directory}}
        shell: bash
        run: |
          mix compile

      - name: Compile Phoenix Assets
        if: ${{ env.working-directory == 'wasmcloud_host' }}
        working-directory: ${{env.working-directory}}
        shell: bash
        run: |
          make esbuild

      - name: Create Mix Release
        working-directory: ${{env.working-directory}}
        shell: bash
        run: |
          mix release
          cd _build/${{ env.MIX_ENV }}/rel/${{env.working-directory}}
          tar -czvf ${{ matrix.release-tarball }} bin erts-* lib releases
          mv ${{ matrix.release-tarball }} ../../../../

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.release-tarball }}
          path: ${{env.working-directory}}/${{ matrix.release-tarball }}

  # release-hostcore-docker:
  #   if: startswith(github.ref, 'refs/tags/') # Only run on tag push
  #   name: Release Image (host_core)
  #   runs-on: ubuntu-22.04
  #   env:
  #     MIX_ENV: release_prod
  #     working-directory: wasmcloud_host
  #     SECRET_KEY_BASE: ${{ secrets.WASMCLOUD_HOST_SECRET_KEY_BASE }}
  #     app-name: host_core
  #     arm-tarball: aarch64-linux-musl-core.tar.gz
  #     builder-image: elixir:1.13.4-alpine
  #     release-image: alpine:3.16
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Determine version
  #       run: echo "app-version=${GITHUB_REF_NAME#v} " > $GITHUB_ENV

  #     # Download the NIF in the path that Docker expects for x86
  #     - uses: actions/download-artifact@v3
  #       with:
  #         path: ./host_core/priv/built/x86_64
  #         name: x86_64-unknown-linux-musl
  #     # Download the NIF in the path that Docker expects for aarch64
  #     - uses: actions/download-artifact@v3
  #       with:
  #         path: ./host_core/priv/built/aarch64
  #         name: aarch64-unknown-linux-musl

  #     - name: Login to AzureCR
  #       uses: azure/docker-login@v1
  #       with:
  #         login-server: ${{ secrets.AZURECR_PUSH_URL }}
  #         username: ${{ secrets.AZURECR_PUSH_USER }}
  #         password: ${{ secrets.AZURECR_PUSH_PASSWORD }}
  #     - name: Login to DockerHub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKERHUB_PUSH_USER }}
  #         password: ${{ secrets.DOCKERHUB_PUSH_PASSWORD }}
  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v2
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2
  #       id: buildx-builder
  #     - name: Build and release docker image
  #       uses: docker/build-push-action@v3
  #       with:
  #         builder: ${{ steps.buildx-builder.outputs.name }}
  #         push: false
  #         context: ${{ env.app-name}}/
  #         file: ${{ env.app-name}}/Dockerfile
  #         platforms: linux/amd64,linux/arm64
  #         build-args: |
  #           BUILDER_IMAGE=${{ env.builder-image }}
  #           RELEASE_IMAGE=${{ env.release-image }}
  #           APP_NAME=${{ env.app-name }}
  #           APP_VSN=${{ env.app-version }}
  #           MIX_ENV=${{ env.MIX_ENV }}
  #         tags: |
  #           wasmcloud.azurecr.io/${{ env.app-name }}:${{ env.app-version }}
  #           wasmcloud.azurecr.io/${{ env.app-name }}:latest
  #           wasmcloud/${{ env.app-name }}:${{ env.app-version }}
  #           wasmcloud/${{ env.app-name }}:latest

  #     - name: Retrieve aarch64 tarball from Docker
  #       run: |
  #         docker run --rm --platform linux/arm64/v8 -iv ${PWD}:/aarch64temp wasmcloud/${{ env.app-name }}:${{ env.app-version}} sh -s <<EOF
  #         tar -czvf ${{ env.arm-tarball }} bin erts-*/ lib/ releases/
  #         cp ${{ env.arm-tarball }} /aarch64temp/
  #         EOF
  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: ${{ env.arm-tarball }}
  #         path: ${{ env.arm-tarball }}

  # Dear reviewer, you may be thinking to yourself, "hey, this looks like a great candidate for a matrix with the above"
  # I once thought so too, and to spare you some incredible pain, turns out _something_ about QEMU does
  # not work properly in a build matrix. Maybe it's due to the way GH runners use Docker, or how they
  # handle multi-tenancy, but it absolutely _does not work_ to build with a matrix.
  #
  # So, sorry about the code duplication, perhaps in the future we'll find a way to make this happen
  release-wasmcloud-docker:
    if: startswith(github.ref, 'refs/tags/') # Only run on tag push
    name: Release Image (wasmcloud_host)
    runs-on: ubuntu-22.04
    env:
      working-directory: wasmcloud_host
      SECRET_KEY_BASE: ${{ secrets.WASMCLOUD_HOST_SECRET_KEY_BASE }}
      app-name: wasmcloud_host
      arm-tarball: aarch64-linux.tar.gz
      arm-tarball-static: aarch64-linux-static.tar.gz
      amd-tarball-static: amd64-linux-static.tar.gz
      builder-image: elixir:1.14.3-otp-24-slim
      release-image: debian:bullseye-slim
    steps:
      - uses: actions/checkout@v3
      - name: Determine version
        run: echo "app-version=${GITHUB_REF_NAME#v} " > $GITHUB_ENV

      # Compile phoenix assets for wasmcloud_host outside of image (dart-sass doesn't support arm linux)
      - name: Install erlang and elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: "=${{ env.otp-version }}"
          elixir-version: "${{ env.elixir-version }}"
          install-hex: true
          install-rebar: true
      - name: Install Mix Dependencies
        working-directory: ${{env.working-directory}}
        run: |
          mix local.rebar --force
          mix local.hex --force
          mix deps.get
      - name: Compile Phoenix Assets
        working-directory: ${{env.working-directory}}
        shell: bash
        run: |
          make esbuild

      - name: Login to AzureCR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.AZURECR_PUSH_URL }}
          username: ${{ secrets.AZURECR_PUSH_USER }}
          password: ${{ secrets.AZURECR_PUSH_PASSWORD }}
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_PUSH_USER }}
          password: ${{ secrets.DOCKERHUB_PUSH_PASSWORD }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        id: buildx-builder
      - name: Build and release docker image
        uses: docker/build-push-action@v3
        with:
          builder: ${{ steps.buildx-builder.outputs.name }}
          push: true
          context: .
          file: ${{ env.app-name }}/Dockerfile
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILDER_IMAGE=${{ env.builder-image }}
            RELEASE_IMAGE=${{ env.release-image }}
            APP_NAME=${{ env.app-name }}
            APP_VSN=${{ env.app-version }}
            SECRET_KEY_BASE=${{ secrets.WASMCLOUD_HOST_SECRET_KEY_BASE }}
            MIX_ENV=release_prod
          tags: |
            wasmcloud.azurecr.io/${{ env.app-name }}:latest
            wasmcloud.azurecr.io/${{ env.app-name }}:${{ env.app-version }}
            wasmcloud/${{ env.app-name }}:${{ env.app-version }}
            wasmcloud/${{ env.app-name }}:latest
      - name: Build common static image
        uses: docker/build-push-action@v3
        with:
          builder: ${{ steps.buildx-builder.outputs.name }}
          push: true
          context: .
          file: Dockerfile.localstatic
          platforms: linux/amd64 #,linux/arm64
          tags: |
            wasmcloud.azurecr.io/wasmcloud_static_base:${{ env.app-version }}
      - name: Build and release static docker image
        uses: docker/build-push-action@v3
        with:
          builder: ${{ steps.buildx-builder.outputs.name }}
          push: true
          context: .
          file: ${{ env.app-name }}/Dockerfile.static
          platforms: linux/amd64 #,linux/arm64
          build-args: |
            BASEIMAGE=wasmcloud.azurecr.io/wasmcloud_static_base:${{ env.app-version }}
            APP_NAME=${{ env.app-name }}
            APP_VSN=${{ env.app-version }}
            SECRET_KEY_BASE=${{ secrets.WASMCLOUD_HOST_SECRET_KEY_BASE }}
            MIX_ENV=release_prod
          tags: |
            wasmcloud.azurecr.io/${{ env.app-name }}:${{ env.app-version }}-static
            wasmcloud/${{ env.app-name }}:${{ env.app-version }}-static

      - name: Retrieve aarch64, aarch64-static, and amd64-static tarballs from Docker
        run: |
          docker run --rm --platform linux/arm64/v8 -iv ${PWD}:/aarch64temp wasmcloud/${{ env.app-name }}:${{ env.app-version }} sh -s <<EOF
          tar -czvf ${{ env.arm-tarball }} bin erts-*/ lib/ releases/
          cp ${{ env.arm-tarball }} /aarch64temp/
          EOF
          # docker run --rm --platform linux/arm64/v8 -iv ${PWD}:/aarch64temp wasmcloud/${{ env.app-name }}:${{ env.app-version }} sh -s <<EOF
          # tar czvf ${{ env.arm-tarball-static }} /usr/local/bin/wasmcloud_host
          # cp ${{ env.arm-tarball-static }} /aarch64temp/
          # EOF
          docker run --rm --platform linux/amd64 -iv ${PWD}:/amd64temp wasmcloud/${{ env.app-name }}:${{ env.app-version }} sh -s <<EOF
          cd /usr/local/bin
          tar -czvf ${{ env.amd-tarball-static }} ./wasmcloud_host
          cp ${{ env.amd-tarball-static }} /amd64temp/
          EOF
      - name: Upload artifact (arm64)
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.arm-tarball }}
          path: ${{ env.arm-tarball }}
      # - name: Upload artifact (arm64 static)
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: ${{ env.arm-tarball-static }}
      #     path: ${{ env.arm-tarball-static }}
      - name: Upload artifact (amd64 static)
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.amd-tarball-static }}
          path: ${{ env.amd-tarball-static }}

  github-release:
    if: startswith(github.ref, 'refs/tags/') # Only run on tag push
    needs:
      [create-mix-releases, release-wasmcloud-docker]
    runs-on: ubuntu-latest
    steps:
      - name: Download Release Tarballs
        uses: actions/download-artifact@v2
        with:
          path: release

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/**/*.tar.gz
          token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: false
          draft: false

  release-charts:
    if: ${{ startswith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.7.1

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.2.1
        with:
          charts_dir: wasmcloud_host
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
