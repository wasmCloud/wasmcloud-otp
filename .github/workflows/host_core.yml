name: HostCore Elixir CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  MIX_ENV: test
  working-directory: ./host_core

jobs:
  build:
    strategy:
      matrix:
        elixir: [1.12.1]
        otp: [22.0, 23.0, 23.3.4.1]
    services:
      nats:
        image: nats
        ports:
          - 4222:4222
      redis:
        image: redis
        ports:
          - 6379:6379

    name: Build and test
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2

      - name: Setup elixir
        uses: actions/setup-elixir@v1
        with:
          elixir-version: ${{ matrix.elixir }} # Define the elixir version [required]
          otp-version: ${{ matrix.otp }} # Define the OTP version [required]

      - name: Retrieve Mix Dependencies Cache
        uses: actions/cache@v2
        id: mix-cache #id to use in retrieve action
        with:
          path: |
            host_core/deps
            host_core/_build
          key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-mix-${{ hashFiles('host_core/mix.exs', 'host_core/mix.lock') }}

      - name: Install Mix Dependencies
        working-directory: ${{env.working-directory}}
        if: steps.mix-cache.outputs.cache-hit != 'true'
        run: |
          mix local.rebar --force
          mix local.hex --force
          mix do deps.get, deps.compile

      - name: Check Formatting
        working-directory: ${{env.working-directory}}
        run: mix format --check-formatted

      - name: Run Credo
        working-directory: ${{env.working-directory}}
        continue-on-error: true # Don't fail entire action with refactoring opportunities for now
        run: mix credo --strict

      - name: Run Tests
        working-directory: ${{env.working-directory}}
        run: mix test

      - name: Retrieve PLT Cache
        uses: actions/cache@v2
        id: plt-cache
        with:
          path: host_core/priv/plts
          key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-plts-${{ hashFiles('host_core/mix.exs', 'host_core/mix.lock') }}

      - name: Create PLTs
        working-directory: ${{env.working-directory}}
        if: steps.plt-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p priv/plts
          mix dialyzer --plt

      - name: Run dialyzer
        working-directory: ${{env.working-directory}}
        continue-on-error: true # Don't fail entire action with dialyzer opportunities for now
        run: mix dialyzer --no-check
# Thank you https://hashrocket.com/blog/posts/build-the-ultimate-elixir-ci-with-github-actions for this action setup
